import numpy as np
from basisFunctions import reconstructU
npA = np.array([1,3,4,6,7,12,13,16,19,25,33,37,42,61,73])

def gaussPoints(quadpoints,tri):
  zeta,weights = np.polynomial.legendre.leggauss(quadpoints)
  zeta = (zeta + 1.)
  tri.s = np.zeros(np.shape(zeta))
  tri.sweights = np.zeros(np.shape(weights))
  tri.s[:] = zeta[:]
  tri.sweights[:] = weights[:]
#  return zeta,weights

def triQuadPoints(p,tri):
  quadpoints = npA[p]
  if (p == 0):
    tri.zetaq = np.array([1./3.,1./3.])
    tri.weights = 0.5
  if (p == 1):
    tri.zetaq = np.array([0.666666666666667, 0.166666666666667, 0.166666666666667, 0.166666666666667,0.166666666666667, 0.666666666666667])
    tri.weights = np.array([0.166666666666666, 0.166666666666666, 0.166666666666666])
  if (p == 2):
    tri.zetaq = np.array([0.333333333333333, 0.333333333333333, 0.600000000000000, 0.200000000000000,0.200000000000000, 0.200000000000000, 0.200000000000000, 0.600000000000000])
    tri.weights = np.array([ -0.281250000000000, 0.260416666666667, 0.260416666666667, 0.260416666666667])
  if (p == 3):
    tri.zetaq = np.array([    0.108103018168070, 0.445948490915965, 0.445948490915965, 0.445948490915965,\
    0.445948490915965, 0.108103018168070, 0.816847572980459, 0.091576213509771,\
    0.091576213509771, 0.091576213509771, 0.091576213509771, 0.816847572980459])
    tri.weights = np.array([    0.111690794839005, 0.111690794839005, 0.111690794839005, 0.054975871827661,\
    0.054975871827661, 0.054975871827661])
  if (p == 4):
    tri.zetaq = np.array([    0.333333333333333, 0.333333333333333, 0.059715871789770, 0.470142064105115,\
    0.470142064105115, 0.470142064105115, 0.470142064105115, 0.059715871789770,\
    0.797426985353087, 0.101286507323456, 0.101286507323456, 0.101286507323456,\
    0.101286507323456, 0.797426985353087])
    tri.weights = np.array([    0.112500000000000, 0.066197076394253, 0.066197076394253, 0.066197076394253,\
    0.062969590272414, 0.062969590272414, 0.062969590272414])
  if (p == 5):
    tri.zetaq = np.array([0.501426509658179, 0.249286745170910, 0.249286745170910, 0.249286745170910,\
    0.249286745170910, 0.501426509658179, 0.873821971016996, 0.063089014491502,\
    0.063089014491502, 0.063089014491502, 0.063089014491502, 0.873821971016996,\
    0.053145049844817, 0.310352451033784, 0.310352451033784, 0.636502499121399,\
    0.636502499121399, 0.053145049844817, 0.310352451033784, 0.053145049844817,\
    0.636502499121399, 0.310352451033784, 0.053145049844817, 0.636502499121399])
    tri.weights = np.array([0.058393137863189, 0.058393137863189, 0.058393137863189, 0.025422453185103,\
    0.025422453185103, 0.025422453185103, 0.041425537809187, 0.041425537809187,\
    0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187])
  if (p == 6):
    tri.zetaq = np.array([ 0.333333333333333, 0.333333333333333, 0.479308067841920, 0.260345966079040,\
    0.260345966079040, 0.260345966079040, 0.260345966079040, 0.479308067841920,\
    0.869739794195568, 0.065130102902216, 0.065130102902216, 0.065130102902216,\
    0.065130102902216, 0.869739794195568, 0.048690315425316, 0.312865496004874,\
    0.312865496004874, 0.638444188569810, 0.638444188569810, 0.048690315425316,\
    0.312865496004874, 0.048690315425316, 0.638444188569810, 0.312865496004874,\
    0.048690315425316, 0.638444188569810])
    tri.weights = np.array([-0.074785022233841, 0.087807628716604, 0.087807628716604, 0.087807628716604,\
    0.026673617804419, 0.026673617804419, 0.026673617804419, 0.038556880445128,\
    0.038556880445128, 0.038556880445128, 0.038556880445128, 0.038556880445128,\
    0.038556880445128])
  if (p == 7):
    tri.zetaq = np.array([\
    0.333333333333333, 0.333333333333333, 0.081414823414554, 0.459292588292723,\
    0.459292588292723, 0.459292588292723, 0.459292588292723, 0.081414823414554,\
    0.658861384496480, 0.170569307751760, 0.170569307751760, 0.170569307751760,\
    0.170569307751760, 0.658861384496480, 0.898905543365938, 0.050547228317031,\
    0.050547228317031, 0.050547228317031, 0.050547228317031, 0.898905543365938,\
    0.008394777409958, 0.263112829634638, 0.263112829634638, 0.728492392955404,\
    0.728492392955404, 0.008394777409958, 0.263112829634638, 0.008394777409958,\
    0.728492392955404, 0.263112829634638, 0.008394777409958, 0.728492392955404])
    tri.weights = np.array([\
    0.072157803838894, 0.047545817133642, 0.047545817133642, 0.047545817133642,\
    0.051608685267359, 0.051608685267359, 0.051608685267359, 0.016229248811599,\
    0.016229248811599, 0.016229248811599, 0.013615157087217, 0.013615157087217,\
    0.013615157087217, 0.013615157087217, 0.013615157087217, 0.013615157087217])
  tri.zetaq = np.reshape(tri.zetaq,(int(np.size(tri.zetaq)/2),2)).transpose()

  #return zetaq,weights

#def integrateEdge(w,f,Jedge):
#  return np.sum(w[:,None]*f*Jedge[None,:],axis=0)


#def integrateEdge(u_edge,tri):
#  return  tri.JedgeTri[None,:,:]*np.sum(tri.sweights[None,:,None,None]*u_edge[:,:,:,:],axis=1)

def integrateEdge(u_edge,tri):
  return  tri.JedgeTri[None,:,:]*np.einsum('j,ijkl->ikl',tri.sweights,u_edge)

def integrateEdgeElem(u_edge,tri,triInd):
  return  tri.JedgeTri[None,:,triInd]*np.einsum('j,ijkl->ikl',tri.sweights,u_edge)

def integrateTriStupid(UQ,tri):
  nvars = np.shape(UQ)[0]
  quadpoints = np.shape(UQ)[1]
  ntris = np.shape(UQ)[-1]
  integ = np.zeros((nvars,ntris))
  for n in range(0,nvars):
    for k in range(0,ntris):
      for i in range(0,quadpoints):  
        integ[n,k] += tri.weights[i]*UQ[n,i,k]*tri.Jdet[i]

def integrateTriSum(UQ,tri):
  return np.sum(tri.weights[None,:,None]*UQ[:,:,:]*tri.Jdet[None,None,:],axis=1)

def integrateTri(UQ,tri):
  return np.einsum('j,ijk->ik',tri.weights,UQ[:,:,:])*tri.Jdet[None]



